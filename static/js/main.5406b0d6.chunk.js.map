{"version":3,"sources":["who-goes-first/src/components/index.js","main/src/routes.js","main/src/App.js","main/src/reportWebVitals.js","main/src/index.js"],"names":["Title","Typography","Container","styled","div","BtnAdd","Button","BtnStart","Operation","WhoGoesFirst","useState","players","setPlayers","inputValue","setInputValue","playersMap","setPlayersMap","hasResult","Object","keys","length","onChange","e","target","value","placeholder","onClick","newPlayers","split","allPlayers","Set","type","min","max","result","maxIndex","maxPoint","i","score","Math","ceil","floor","random","size","dataSource","renderItem","item","Item","percent","renderPlayer","sortedPlayers","sort","x","y","status","title","subTitle","join","renderResult","Routes","path","exact","component","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAIQA,EAAUC,IAAVD,MAEFE,EAAYC,IAAOC,IAAV,kDAITC,EAASF,YAAOG,IAAPH,CAAH,4BAGNI,EAAWJ,YAAOG,IAAPH,CAAH,sDAIRK,EAAYL,IAAOC,IAAV,mDAUf,SAASK,IACL,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAQMC,EAAYC,OAAOC,KAAKJ,GAAYK,OAAS,EAyCnD,OACI,eAAClB,EAAD,WACI,eAAC,IAAD,WACI,cAACF,EAAD,6BACA,cAAC,IAAD,OAEJ,cAAC,IAAD,CAAOqB,SAAU,SAACC,GAAQR,EAAcQ,EAAEC,OAAOC,QAAUC,YAAY,qBACvE,eAACjB,EAAD,WACI,cAACH,EAAD,CAAQqB,QAvDG,WACnB,IAAMC,EAAad,EAAWe,MAAM,KAC9BC,EAAU,sBAAOlB,GAAP,YAAmBgB,IACnCf,EAAW,YAAI,IAAIkB,IAAID,MAoDkBE,KAAK,UAAtC,iBACA,cAACxB,EAAD,CAAUmB,QAhDC,WAInB,IAHA,IApBcM,EAAKC,EAoBbC,EAAS,GACXC,GAAY,EACZC,GAAY,EACPC,EAAI,EAAGA,EAAI1B,EAAQS,OAAQiB,IAAK,CACrC,IAAMC,GAxBIN,EAwBiB,EAxBZC,EAwBe,IAvBtCD,EAAMO,KAAKC,KAAKR,GAChBC,EAAMM,KAAKE,MAAMR,GACVM,KAAKE,MAAMF,KAAKG,UAAYT,EAAMD,GAAOA,IAsBxCE,EAAOvB,EAAQ0B,IAAMC,EACjBA,EAAQF,IACRD,EAAWE,EACXD,EAAWE,GAGnBJ,EAAOvB,EAAQwB,IAAa,IAC5BnB,EAAckB,IAmCN,sBAEJ,cAAC,IAAD,CACIS,KAAK,QACLC,WAAYjC,EACZkC,WAAY,SAAAC,GAAI,OArCP,SAACA,GAClB,OACI,eAAC,IAAKC,KAAN,WACKD,EACA7B,GAAa,cAAC,IAAD,CAAU+B,QAASjC,EAAW+B,QAiCxBG,CAAaH,MA5BxB,WACjB,IAAK7B,EACD,OAAO,KAEX,IAAMiC,EAAgBhC,OAAOC,KAAKJ,GAAYoC,MAAK,SAACC,EAAGC,GAAJ,OAAUtC,EAAWsC,GAAKtC,EAAWqC,MACxF,OACI,cAAC,IAAD,CACIE,OAAO,UACPC,MAAK,UAAKL,EAAc,GAAnB,gBACLM,SAAQ,oBAAeN,EAAcO,KAAK,QAqB7CC,MCvFN,IAAMC,EAAS,WAClB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,KAAK,kBAAkBC,OAAK,EAACC,UAAWrD,OCC5CsD,MARf,WACI,OACI,cAAC,IAAD,CAAQC,SAAS,IAAjB,SACI,cAAC,EAAD,OCKGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5406b0d6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Typography, Divider, Input, Button, List, Result, Progress } from \"antd\";\n\nconst { Title } = Typography;\n\nconst Container = styled.div`\n    padding: 0 1rem;\n`;\n\nconst BtnAdd = styled(Button)`\n`;\n\nconst BtnStart = styled(Button)`\n    margin-left: 0.5rem;\n`;\n\nconst Operation = styled.div`\n    margin-top: 1rem;\n`;\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction WhoGoesFirst() {\n    const [players, setPlayers] = useState([]);\n    const [inputValue, setInputValue] = useState(\"\");\n    const [playersMap, setPlayersMap] = useState([]);\n\n    const handPlayersAdd = () => {\n        const newPlayers = inputValue.split(\",\")\n        const allPlayers = [...players, ...newPlayers];\n        setPlayers([...new Set(allPlayers)]);\n    };\n\n    const hasResult = Object.keys(playersMap).length > 0;\n\n    const handleBtnStart = () => {\n        const result = {};\n        let maxIndex = -1;\n        let maxPoint = -1;\n        for (let i = 0; i < players.length; i++) {\n            const score = getRandomInt(1, 101);\n            result[players[i]] = score;\n            if (score > maxPoint) {\n                maxIndex = i;\n                maxPoint = score;\n            }\n        }\n        result[players[maxIndex]] = 100;\n        setPlayersMap(result);\n    };\n\n    const renderPlayer = (item) => {\n        return (\n            <List.Item>\n                {item}\n                {hasResult && <Progress percent={playersMap[item]} />}\n            </List.Item>\n        )\n    }\n\n    const renderResult = () => {\n        if (!hasResult) {\n            return null;\n        }\n        const sortedPlayers = Object.keys(playersMap).sort((x, y) => playersMap[y] - playersMap[x]);\n        return (\n            <Result\n                status=\"success\"\n                title={`${sortedPlayers[0]} goes first!`}\n                subTitle={`In order: ${sortedPlayers.join(\",\")}`}\n            />\n        )\n    }\n\n    return (\n        <Container>\n            <Typography>\n                <Title>Who goes first</Title>\n                <Divider/>\n            </Typography>\n            <Input onChange={(e) => { setInputValue(e.target.value) }} placeholder=\"Add participants\"/>\n            <Operation>\n                <BtnAdd onClick={handPlayersAdd} type=\"primary\">Add</BtnAdd>\n                <BtnStart onClick={handleBtnStart}>Start</BtnStart>\n            </Operation>\n            <List\n                size=\"large\"\n                dataSource={players}\n                renderItem={item => renderPlayer(item)}\n            />\n            {renderResult()}\n        </Container>\n    )\n}\n\nexport { WhoGoesFirst };","import React from \"react\";\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport { WhoGoesFirst } from \"@toolbox/who-goes-first\"\n\nexport const Routes = () => {\n    return (\n        <Switch>\n            <Route path=\"/who-goes-first\" exact component={WhoGoesFirst} />\n        </Switch>\n    )\n};","import React from \"react\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { Routes } from \"./routes\";\n\nfunction App() {\n    return (\n        <Router basename='/'>\n            <Routes/>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}